datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  account   Account?
  budget    Budget[]
  notes     Note[]
  outgoCategories OutgoCategory[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Account {
  totalBalance  Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Budget {
  id    String @id @default(cuid())
  name  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  outgo    Outgo[]
  income   Income[]
}

model Outgo {
    id String @id @default(cuid())
    amount Float
    description String
    date  DateTime

    subcategory String

    tag Tag[]

    budget  Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    budgetId String

    outgoCategory  OutgoCategory  @relation(fields: [outgoCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    outgoCategoryId  String
}

model Income {
    id String @id @default(cuid())
    amount Float
    description String
    date  DateTime

    tag Tag[]

    budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    budgetId String
}

model Tag {
    id String @id @default(cuid())
    name String

    outgo   Outgo   @relation(fields: [outgoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    outgoId String

    income   Income   @relation(fields: [incomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    incomeId String
}

model OutgoCategory {
    id String @id @default(cuid())
    name String

    subcategories String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    outgo    Outgo[]
}
